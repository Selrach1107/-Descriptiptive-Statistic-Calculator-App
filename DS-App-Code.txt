import 'dart:math';
import 'package:flutter/material.dart';

void main() {
  runApp(DescriptiveStatisticsApp());
}

class DescriptiveStatisticsApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Descriptive Statistics App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: MyHomePage(title: 'Descriptive Statistics'),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;

  MyHomePage({Key? key, required this.title}) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _dataType = 'Population';
  int _dataCount = 0;
  List<double> _dataValues = [];
  List<TextEditingController> _controllers = [];
  bool _showDataInputFields = false;
  final _formKey = GlobalKey<FormState>();
  Map<String, dynamic>? _statisticsResults;

  void _showDataFields() {
    setState(() {
      _showDataInputFields = true;
      _statisticsResults = null;
      _dataValues = List<double>.filled(_dataCount, 0);
      _controllers = List.generate(
        _dataCount,
        (index) => TextEditingController(),
      );
    });
  }

  void _calculateStatistics() {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      _dataValues = _controllers.map((controller) {
        return double.tryParse(controller.text) ?? 0.0;
      }).toList();

      double mean = calculateMean(_dataValues);
      double median = calculateMedian(_dataValues);
      var modeResult = calculateMode(_dataValues);
      double range = calculateRange(_dataValues);
      double variance = calculateVariance(_dataValues, _dataType);
      double standardDeviation = calculateStandardDeviation(variance);
      List<MapEntry<double, int>> frequencyTable =
          createFrequencyTable(_dataValues);

      setState(() {
        _statisticsResults = {
          'mean': mean,
          'median': median,
          'modes': modeResult['modes'],
          'modeType': modeResult['type'],
          'range': range,
          'variance': variance,
          'stdDev': standardDeviation,
          'frequencyTable': frequencyTable,
        };
      });
    }
  }

  void _clearAll() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Warning'),
          content: Text('Are you sure you want to clear all data values?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();

                setState(() {
                  _dataType = 'Population';
                  _dataCount = 0;
                  _dataValues = [];
                  _controllers.forEach((controller) => controller.dispose());
                  _controllers = [];
                  _showDataInputFields = false;
                  _formKey.currentState?.reset();
                  _statisticsResults = null;
                  print('Statistics results cleared');
                });
              },
              child: Text('Clear'),
            ),
          ],
        );
      },
    );
  }

  // Functions for statistical calculations
  double calculateMean(List<double> data) {
    return data.reduce((a, b) => a + b) / data.length;
  }

  double calculateMedian(List<double> data) {
    List<double> sortedData = List.from(data)..sort();
    int middle = sortedData.length ~/ 2;
    if (sortedData.length % 2 == 1) {
      return sortedData[middle];
    } else {
      return (sortedData[middle - 1] + sortedData[middle]) / 2;
    }
  }

  Map<String, dynamic> calculateMode(List<double> data) {
    Map<double, int> frequency = {};
    for (var value in data) {
      frequency[value] = (frequency[value] ?? 0) + 1;
    }

    int highestFrequency = frequency.values.reduce((a, b) => a > b ? a : b);
    List<double> modes = frequency.entries
        .where((entry) => entry.value == highestFrequency)
        .map((entry) => entry.key)
        .toList();

    String modeType;
    if (highestFrequency == 1) {
      modeType = 'No Mode'; // No mode if all values are unique
    } else if (modes.length == 1) {
      modeType = 'Unimodal'; // One mode
    } else if (modes.length == 2) {
      modeType = 'Bimodal'; // Exactly two modes
    } else {
      modeType = 'Multimodal'; // More than two modes
    }

    return {'modes': modes, 'type': modeType};
  }

  double calculateRange(List<double> data) {
    double min = data.reduce((a, b) => a < b ? a : b);
    double max = data.reduce((a, b) => a > b ? a : b);
    return max - min;
  }

  double calculateVariance(List<double> data, String dataType) {
    double mean = calculateMean(data);
    double sumOfSquaredDifferences = data
        .map((value) => (value - mean) * (value - mean))
        .reduce((a, b) => a + b);
    return sumOfSquaredDifferences /
        (dataType == 'Population' ? data.length : data.length - 1);
  }

  double calculateStandardDeviation(double variance) {
    return sqrt(variance);
  }

  List<MapEntry<double, int>> createFrequencyTable(List<double> data) {
    Map<double, int> frequency = {};
    for (var value in data) {
      frequency[value] = (frequency[value] ?? 0) + 1;
    }
    return frequency.entries.toList()..sort((a, b) => a.key.compareTo(b.key));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.bar_chart,
              color: Colors.white,
            ),
            SizedBox(width: 10),
            Text(
              "Descriptive Statistics Calculator",
              style: TextStyle(
                color: Colors.white,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.teal,
      ),
      body: Container(
        color: Colors.teal[30],
        padding: const EdgeInsets.all(30),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Form(
                      key: _formKey,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            padding: const EdgeInsets.all(30),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12.0),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.teal.withOpacity(0.1),
                                  spreadRadius: 5,
                                  blurRadius: 10,
                                  offset: Offset(0, 4),
                                ),
                              ],
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                Container(
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(12.0),
                                  ),
                                  child: DropdownButtonFormField<String>(
                                    value: _dataType,
                                    decoration: InputDecoration(
                                      labelText: 'Data Type',
                                      labelStyle:
                                          TextStyle(color: Colors.black54),
                                      border: OutlineInputBorder(
                                        borderRadius:
                                            BorderRadius.circular(12.0),
                                        borderSide: BorderSide.none,
                                      ),
                                      filled: true,
                                      fillColor: Colors.teal[50],
                                    ),
                                    items: ['Population', 'Sample']
                                        .map((label) => DropdownMenuItem(
                                              child: Text(label,
                                                  style: TextStyle(
                                                      color: Colors.black)),
                                              value: label,
                                            ))
                                        .toList(),
                                    onChanged: (value) {
                                      setState(() {
                                        _dataType = value!;
                                      });
                                    },
                                  ),
                                ),
                                SizedBox(height: 16),
                                Container(
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(12.0),
                                  ),
                                  child: TextFormField(
                                    decoration: InputDecoration(
                                      labelText: 'Number of Data Points',
                                      labelStyle:
                                          TextStyle(color: Colors.black54),
                                      border: OutlineInputBorder(
                                        borderRadius:
                                            BorderRadius.circular(12.0),
                                        borderSide: BorderSide.none,
                                      ),
                                      filled: true,
                                      fillColor: Colors.teal[50],
                                    ),
                                    keyboardType: TextInputType.number,
                                    validator: (value) {
                                      if (value == null || value.isEmpty) {
                                        return 'Please enter a number';
                                      }
                                      int? count = int.tryParse(value);
                                      if (count == null || count <= 0) {
                                        return 'Enter a valid number';
                                      }
                                      return null;
                                    },
                                    onSaved: (value) {
                                      _dataCount = int.parse(value!);
                                    },
                                  ),
                                ),
                                SizedBox(height: 30),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Expanded(
                                      child: ElevatedButton(
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Colors.teal,
                                          foregroundColor: Colors.white,
                                          shape: RoundedRectangleBorder(
                                            borderRadius:
                                                BorderRadius.circular(10.0),
                                          ),
                                          padding: EdgeInsets.symmetric(
                                            vertical: 20.0,
                                            horizontal: 24.0,
                                          ),
                                        ),
                                        onPressed: () {
                                          if (_formKey.currentState!
                                              .validate()) {
                                            _formKey.currentState!.save();
                                            _showDataFields();
                                          }
                                        },
                                        child: Text(
                                          'Enter Data Values',
                                          style: TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.normal,
                                          ),
                                        ),
                                      ),
                                    ),
                                    SizedBox(width: 10),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 30),
                          if (_showDataInputFields)
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(12.0),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.teal.withOpacity(0.1),
                                    spreadRadius: 5,
                                    blurRadius: 10,
                                    offset: Offset(0, 4),
                                  ),
                                ],
                              ),
                              padding: const EdgeInsets.all(30),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  Text(
                                    'Enter Data Values:',
                                    style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold),
                                  ),
                                  SizedBox(height: 16),
                                  Column(
                                    children: _controllers.map((controller) {
                                      return Padding(
                                        padding: const EdgeInsets.symmetric(
                                            vertical: 4.0),
                                        child: Container(
                                          decoration: BoxDecoration(
                                            borderRadius:
                                                BorderRadius.circular(12.0),
                                          ),
                                          child: TextFormField(
                                            controller: controller,
                                            decoration: InputDecoration(
                                              border: OutlineInputBorder(
                                                borderRadius:
                                                    BorderRadius.circular(12.0),
                                                borderSide: BorderSide.none,
                                              ),
                                              labelText: 'Value',
                                              labelStyle: TextStyle(
                                                  color: Colors.black54),
                                              filled: true,
                                              fillColor: Colors.teal[50],
                                            ),
                                            keyboardType: TextInputType.number,
                                            validator: (value) {
                                              if (value == null ||
                                                  value.isEmpty) {
                                                return 'Please enter a number';
                                              }
                                              double? val =
                                                  double.tryParse(value);
                                              if (val == null) {
                                                return 'Enter a valid number';
                                              }
                                              return null;
                                            },
                                          ),
                                        ),
                                      );
                                    }).toList(),
                                  ),
                                  SizedBox(height: 30),
                                  Row(
                                    children: [
                                      Expanded(
                                        child: ElevatedButton(
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: Colors.teal,
                                            foregroundColor: Colors.white,
                                            shape: RoundedRectangleBorder(
                                              borderRadius:
                                                  BorderRadius.circular(10.0),
                                            ),
                                            padding: EdgeInsets.symmetric(
                                                vertical: 20.0,
                                                horizontal: 24.0),
                                          ),
                                          onPressed: _calculateStatistics,
                                          child: Text(
                                            'Calculate',
                                            style: TextStyle(
                                                fontSize: 16,
                                                fontWeight: FontWeight.normal),
                                          ),
                                        ),
                                      ),
                                      SizedBox(width: 10),
                                      Expanded(
                                        child: ElevatedButton(
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: Colors.red[300],
                                            foregroundColor: Colors.white,
                                            shape: RoundedRectangleBorder(
                                              borderRadius:
                                                  BorderRadius.circular(10.0),
                                            ),
                                            padding: EdgeInsets.symmetric(
                                                vertical: 20.0,
                                                horizontal: 24.0),
                                          ),
                                          onPressed: _clearAll,
                                          child: Text(
                                            'Clear',
                                            style: TextStyle(
                                                fontSize: 16,
                                                fontWeight: FontWeight.normal),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            )
                        ],
                      ),
                    ),
                    SizedBox(height: 30),
                    if (_statisticsResults != null)
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.teal[600],
                          borderRadius: BorderRadius.circular(12.0),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.1),
                              spreadRadius: 5,
                              blurRadius: 10,
                              offset: Offset(0, 4),
                            ),
                          ],
                        ),
                        padding: const EdgeInsets.all(30),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Align(
                              alignment: Alignment.centerLeft,
                              child: Text(
                                'Results:',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                            SizedBox(height: 30),
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(12.0),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.teal.withOpacity(0.1),
                                    spreadRadius: 2,
                                    blurRadius: 8,
                                    offset: Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Column(
                                  crossAxisAlignment:
                                      CrossAxisAlignment.stretch,
                                  children: [
                                    Container(
                                      child: DataTable(
                                        columnSpacing: 24.0,
                                        horizontalMargin: 16.0,
                                        columns: [
                                          DataColumn(
                                            label: Text(
                                              'Value',
                                              textAlign: TextAlign.center,
                                              style: TextStyle(
                                                fontWeight: FontWeight.bold,
                                                fontSize: 16,
                                                color: Colors.teal,
                                              ),
                                            ),
                                          ),
                                          DataColumn(
                                            label: Text(
                                              'Frequency',
                                              textAlign: TextAlign.center,
                                              style: TextStyle(
                                                fontWeight: FontWeight.bold,
                                                fontSize: 16,
                                                color: Colors.teal,
                                              ),
                                            ),
                                          ),
                                        ],
                                        rows: _statisticsResults![
                                                'frequencyTable']
                                            .map<DataRow>((entry) {
                                          return DataRow(
                                            cells: [
                                              DataCell(
                                                Text(
                                                  entry.key.toString(),
                                                  textAlign: TextAlign.center,
                                                  style:
                                                      TextStyle(fontSize: 14),
                                                ),
                                              ),
                                              DataCell(
                                                Text(
                                                  entry.value.toString(),
                                                  textAlign: TextAlign.center,
                                                  style:
                                                      TextStyle(fontSize: 14),
                                                ),
                                              ),
                                            ],
                                          );
                                        }).toList(),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            SizedBox(height: 30),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  'Mean: ${_statisticsResults!['mean']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Median: ${_statisticsResults!['median']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Mode: ${(_statisticsResults!['modes'] as List<double>).join(', ')}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Mode Type: ${_statisticsResults!['modeType']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Range: ${_statisticsResults!['range']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Variance: ${_statisticsResults!['variance']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                Text(
                                  'Standard Deviation: ${_statisticsResults!['stdDev']}',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      )
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
